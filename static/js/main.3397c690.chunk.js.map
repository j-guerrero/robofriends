{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3397c690.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) =>{\r\n\r\n\treturn (\r\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow'>\r\n\t\t\t<img alt='roboPic' src = {`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({ robots }) =>{\r\n\r\n\tconsole.log('CardList');\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map( (user, i) =>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey= {i}\r\n\t\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\tconsole.log('SearchBox');\r\n\treturn (\r\n\t<div className ='pa2'>\r\n\t\t<input\r\n\t\t\taria-label='Search Robots'\r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots'\r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style ={{overflowY: 'scroll', border: '5px solid black', height: '700px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\r\n\r\n\r\n// Wil only render when 'props' are changed\r\nclass CounterButton extends PureComponent {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\tif (this.state.count !== nextState.count){\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state =>{\r\n\t\t\treturn {count: state.count + 1}\r\n\t\t})\r\n\t}\r\n\t\r\n\trender(){\r\n\t\tconsole.log('CounterButton');\r\n\t\treturn (\r\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\r\n\t\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton.js';\r\n\r\nclass Header extends Component{\r\n\t\r\n\tshouldComponentUpdate(nextProps, nextState){\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender(){\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<CounterButton color={'red'} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry.js';\r\nimport Header from '../components/Header.js';\r\n\r\nimport './App.css';\r\n\r\n\r\nconst mapStateToProps = (state) =>{\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className ='tc'>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t{ isPending ? <h1> Loading </h1> :\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t}\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAIL\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAIL, payload: error}))\r\n}\r\n","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAIL\r\n} from './constants.js';\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tconsole.log(action.type);\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAIL:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<Provider store = {store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'));\n\t\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}